import React, { createContext, ReactNode, useContext, useState } from "react";

interface Language {
  code: "en" | "hi";
  name: string;
  flag: string;
}

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  availableLanguages: Language[];
  t: (key: string) => string;
}

const languages: Language[] = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
];

// Comprehensive translations
const translations: Record<"en" | "hi", Record<string, string>> = {
  en: {
    welcome: "JANMARG",
    selectArea: "Select Area",
    myReports: "My Reports",
    anonymous: "Anonymous",
    submitted: "Submitted",
    inProgress: "In Progress",
    resolved: "Resolved",
    selectLanguage: "Select Language",
    search: "Search reports...",
    filter: "Filter",
    noReports: "No Reports Found",
    createReport: "Create Report",
    reportIssue: "Report an Issue",
    home: "Home",
    profile: "Profile",
    upvote: "Upvote",
    viewDetails: "View Details",
    location: "Location",
    description: "Description",
    status: "Status",
    reportedBy: "Reported by",
    timeAgo: "ago",
    justNow: "Just now",
  },
  hi: {
    welcome: "рдЬрдирдорд╛рд░реНрдЧ",
    selectArea: "рдХреНрд╖реЗрддреНрд░ рдЪреБрдиреЗрдВ",
    myReports: "рдореЗрд░реА рд░рд┐рдкреЛрд░реНрдЯреЗрдВ",
    anonymous: "рдЕрдЬреНрдЮрд╛рдд",
    submitted: "рдкреНрд░рд╕реНрддреБрдд",
    inProgress: "рдкреНрд░рдЧрддрд┐ рдореЗрдВ",
    resolved: "рд╕рдорд╛рдзрд╛рди рд╣реЛ рдЧрдпрд╛",
    selectLanguage: "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
    search: "рд░рд┐рдкреЛрд░реНрдЯ рдЦреЛрдЬреЗрдВ...",
    filter: "рдлрд╝рд┐рд▓реНрдЯрд░",
    noReports: "рдХреЛрдИ рд░рд┐рдкреЛрд░реНрдЯ рдирд╣реАрдВ рдорд┐рд▓реА",
    createReport: "рд░рд┐рдкреЛрд░реНрдЯ рдмрдирд╛рдПрдВ",
    reportIssue: "рд╕рдорд╕реНрдпрд╛ рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ",
    home: "рд╣реЛрдо",
    profile: "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓",
    upvote: "рд╕рдорд░реНрдерди",
    viewDetails: "рд╡рд┐рд╡рд░рдг рджреЗрдЦреЗрдВ",
    location: "рд╕реНрдерд╛рди",
    description: "рд╡рд┐рд╡рд░рдг",
    status: "рд╕реНрдерд┐рддрд┐",
    reportedBy: "рджреНрд╡рд╛рд░рд╛ рд░рд┐рдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛",
    timeAgo: "рдкрд╣рд▓реЗ",
    justNow: "рдЕрднреА рдЕрднреА",
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({
  children,
}) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(
    languages[0]
  );

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
  };

  const t = (key: string): string => {
    return translations[currentLanguage.code][key] || key;
  };

  return (
    <LanguageContext.Provider
      value={{
        currentLanguage,
        setLanguage,
        availableLanguages: languages,
        t,
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
};
