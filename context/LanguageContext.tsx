import React, { createContext, ReactNode, useContext, useState } from "react";

interface Language {
  code: "en" | "hi";
  name: string;
  flag: string;
}

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  availableLanguages: Language[];
  t: (key: string) => string;
}

const languages: Language[] = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
];

// Basic translations
const translations: Record<"en" | "hi", Record<string, string>> = {
  en: {
    welcome: "Reports in your area",
    selectArea: "Select Area",
    myReports: "My Reports",
    anonymous: "Anonymous",
    submitted: "Submitted",
    inProgress: "In Progress",
    resolved: "Resolved",
    selectLanguage: "Select Language",
    search: "Search reports...",
  },
  hi: {
    welcome: "рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд░рд┐рдкреЛрд░реНрдЯреНрд╕",
    selectArea: "рдХреНрд╖реЗрддреНрд░ рдЪреБрдиреЗрдВ",
    myReports: "рдореЗрд░реА рд░рд┐рдкреЛрд░реНрдЯреНрд╕",
    anonymous: "рдЧреБрдордирд╛рдо",
    submitted: "рдЬрдорд╛ рдХрд┐рдпрд╛ рдЧрдпрд╛",
    inProgress: "рдкреНрд░рдЧрддрд┐ рдореЗрдВ",
    resolved: "рд╣рд▓ рдХрд┐рдпрд╛ рдЧрдпрд╛",
    selectLanguage: "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
    search: "рд░рд┐рдкреЛрд░реНрдЯ рдЦреЛрдЬреЗрдВ...",
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({
  children,
}) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(
    languages[0]
  );

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
  };

  const t = (key: string): string => {
    return translations[currentLanguage.code][key] || key;
  };

  return (
    <LanguageContext.Provider
      value={{
        currentLanguage,
        setLanguage,
        availableLanguages: languages,
        t,
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
};
